.\"
.\" SPDX-License-Identifier: BSD-2-Clause
.\"
.\" Copyright (c) 2023 The FreeBSD Foundation
.\"
.\" This manual page was written by Mina Galić <FreeBSD@igalic.co> under
.\" sponsorship from the FreeBSD Foundation.
.\"
.Dd August 8, 2023
.Dt VIRTQUEUE 9
.Os
.Sh NAME
.Nm virtqueue
.Nd "functions for accessing and manipulating virtqueues"
.Sh SYNOPSIS
.In dev/virtio/virtio.h
.In dev/virtio/virtqueue.h
.Ss /* virtqueue allocation functions */
.Ft int
.Fo virtio_alloc_virtqueues
.Fa "device_t dev"
.Fa "int flags"
.Fa "int nvqs"
.Fa "struct vq_alloc_info *info"
.Fc
.Ft int
.Fo virtqueue_alloc
.Fa "device_t dev"
.Fa "uint16_t queue"
.Fa "uint16_t size"
.Fa "bus_size_t notify_offset"
.Fa "int align"
.Fa "vm_paddr_t highaddr"
.Fa "struct vq_alloc_info *info"
.Fa "struct virtqueue **vqp"
.Fc
.Ft void*
.Fo virtqueue_drain
.Fa "struct virtqueue *vq"
.Fa "int *last"
.Fc
.Ft void
.Fo virtqueue_free
.Fa "struct virtqueue *vq"
.Fc
.Ft int
.Fo virtqueue_reinit
.Fa "struct virtqueue *vq"
.Fa "uint16_t size"
.Fc
.Ss /* virtqueue interrupt callback functions */
.Ft int
.Fo virtqueue_intr_filter
.Fa "struct virtqueue *vq"
.Fc
.Ft void
.Fo virtqueue_intr
.Fa "struct virtqueue *vq"
.Fc
.Ft int
.Fo virtqueue_enable_intr
.Fa "struct virtqueue *vq"
.Fc
.Ft int
.Fo virtqueue_postpone_intr
.Fa "struct virtqueue *vq"
.Fa "vq_postpone_t hint"
.Fc
.Ft void
.Fo virtqueue_disable_intr
.Fa "struct virtqueue *vq"
.Fc
.Ss /* Get physical address of the virtqueue ring */
.Ft vm_paddr_t
.Fo virtqueue_paddr
.Fa "struct virtqueue *vq"
.Fc
.Ft vm_paddr_t
.Fo virtqueue_desc_paddr
.Fa "struct virtqueue *vq"
.Fc
.Ft vm_paddr_t
.Fo virtqueue_avail_paddr
.Fa "struct virtqueue *vq"
.Fc
.Ft vm_paddr_t
.Fo virtqueue_used_paddr
.Fa "struct virtqueue *vq"
.Fc
.Ss /* virtqueue size and index information functions */
.Ft uint16_t
.Fo virtqueue_index
.Fa "struct virtqueue *vq"
.Fc
.Ft bool
.Fo virtqueue_full
.Fa "struct virtqueue *vq"
.Fc
.Ft bool
.Fo virtqueue_empty
.Fa "struct virtqueue *vq"
.Fc
.Ft int
.Fo virtqueue_size
.Fa "struct virtqueue *vq"
.Fc
.Ft int
.Fo virtqueue_nfree
.Fa "struct virtqueue *vq"
.Fc
.Ft int
.Fo virtqueue_nused
.Fa "struct virtqueue *vq"
.Fc
.Ft void
.Fo virtqueue_notify
.Fa "struct virtqueue *vq"
.Fc
.Ft void
.Fo virtqueue_dump
.Fa "struct virtqueue *vq"
.Fc
.Ss /* Receive data from or send data to a virtqueue */
.Ft int
.Fo virtqueue_enqueue
.Fa struct virtqueue *vq
.Fa void *cookie
.Fa struct sglist *sg
.Fa "int readable"
.Fa "int writable"
.Fc
.Ft void*
.Fo virtqueue_dequeue
.Fa "struct virtqueue *vq"
.Fa "uint32_t *len"
.Fc
.Ft void*
.Fo virtqueue_poll
.Fa "struct virtqueue *vq"
.Fa "uint32_t *len"
.Fc
.Sh DESCRIPTION
The virtqueue functions provide an API into the most important VirtIO abstraction.
.Pp
The low-level
.Fn virtqueue_alloc
function allocates a virtqueue using
.Xr malloc 9 ,
and associating it the
.Xr device 9
dev.
.Pp
A high-level function which abstracts the binding to the the bus can be found in
.Fn virtio_alloc_virtqueues .
This function also has the binding to the device which allows easy access to that device in module functions where that might otherwise not be easily achievable.
.Pp
.Fn virtqueue_free
frees the virtqueue, and is called automatically by either the bus, or by theallocation function in case of failure.
Similarly,
.Fn virtqueue_reinit
is a low-level function used by busses to reinitialize the virtqueue when the bus is reinitialized.
.Pp
.Fn virtqueue_drain
drains the queue, and is typically called on detachment of the device.
.Pp
The virtqueue interrupt functions
.Fn virtqueue_intr
and
.Fn virtqueue_intr_filter
help attach an interrupt handlers to a virtqueue and can be used for example in
.Xr bus_setup_intr 9 .
While
.Fn virtqueue_disable_intr ,
.Fn virtqueue_postpone_intr ,
and
.Fn virttqueue_enable_intr
allow finer grained control of what interrupts to process in
.Xr driver 9
code, and when.
.Pp
The functions
.Fn virtqueue_paddr ,
.Fn virtqueue_desc_paddr ,
.Fn virtqueue_avail_paddr ,
.Fn virtqueue_used_paddr ,
return the physical address
.Ft vm_paddr_t
of the underlying ring buffer, its description, the "available ring", and "used
ring", respectively, as mapping to the kernel virtual address of their
underlying structures, as per
.Xr vtophys 9
of each platform.
.Sh EXAMPLES
.Bd -literal -offset indent
uint64_t cid = virtio_htog32(true, 0x2);
.Sh SEE ALSO
.Xr sglist 9 ,
.Xr BUS_SETUP_INTR 9 ,
.Xr pmap 9 .
.Sh AUTHORS
This manual page was written by
.An Mina Galić .

